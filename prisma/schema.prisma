// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int             @id @default(autoincrement())
  name         String
  email        String          @unique
  hashPassword String
  projects     UserToProject[]
  Project      Project[]
  Task         Task[]
}

model UserToProject {
  createdAt DateTime @default(now())
  // when the user is deleted, remove them from usersprojects
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  // when the project is deleted, remove them from usersprojects
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId Int

  @@id([userId, projectId])
}

model Project {
  id          Int             @id @default(autoincrement())
  name        String
  description String?
  // when the project owner is deleted, delete their projects
  owner       User            @relation(fields: [userOwnerId], references: [id], onDelete: Cascade)
  userOwnerId Int
  members     UserToProject[]
  Task        Task[]
}

model Task {
  id                  Int         @id @default(autoincrement())
  title               String      @db.VarChar(255)
  description         String?
  createdAt           DateTime    @default(now())
  status              String      @default("pending")
  // when a project is deleted, delete this task
  project             Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId           Int
  // when the responsible user is deleted, set as null
  assignedMember   User?       @relation(fields: [assignedMemberId], references: [id], onDelete: SetNull)
  assignedMemberId Int?
  TaskToTag           TaskToTag[]
}

model TaskToTag {
  // when a tag is deleted, delete this entry
  tag    Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)
  tagId  Int
  // when a task is deleted, delete this entry
  task   Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId Int

  @@id([tagId, taskId])
}

model Tag {
  id        Int         @id @default(autoincrement())
  title     String
  TaskToTag TaskToTag[]
}
